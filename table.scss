@import 'compass/css3';
@import 'variables';

$aspect-ratio: 4 / 3;
$grid-width: 60px;

@import 'compass/reset';

body {
  // background-color: #c7c7cc;
  background: white;
  color: black;
  font: {
    family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
    size: 17px;
    weight: 200;
  }
}

#table {
  $min-width: 320px;
  $max-width: 1024px;

  margin: 0 auto;
  position: relative;

  // Actual height and width will be set by JavaScript.
  min-width: $min-width;
  min-height: $min-width / $aspect-ratio;
  max-width: $max-width;
  max-height: $max-width / $aspect-ratio;
}

$card-aspect-ratio: 3 / 4;
$card-width: $grid-width;
$card-height: $card-width / $card-aspect-ratio;
$position-width: $grid-width * 3;
$position-height: $grid-width * 2;

.position {
  position: relative;
  width: $position-width;
  height: $position-height;

  .info {
    position: absolute;
    bottom: 0;
    background: rgba(#c7c7cc, 0.85);
    // background: rgba(0, 0, 0, 0.85);
    width: 100%;
    height: $grid-width;
    z-index: 1;
  }

  .cards {
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 0;

    .card {
      position: absolute;

      $card-overlap: 0.6;

      @for $number-of-cards from 1 through 5 {
        $cards-width: ((1 - $card-overlap) * $number-of-cards + $card-overlap) * $card-width;

        @for $card-index from 1 through $number-of-cards {
          $reverse-index: $number-of-cards - $card-index + 1;

          &:nth-child(#{$card-index}):nth-last-child(#{$reverse-index}) {
            left: ($position-width - $cards-width) / 2 + $card-width * (1 - $card-overlap) * ($card-index - 1);
          }
        }
      }
    }
  }
}

.player {
  .avatar {
    display: block;
    float: left;
    height: $grid-width;
    width: $grid-width;
  }

  .name, .chips {
    font-size: 14px;
    width: $grid-width * 2;
    height: $grid-width / 2;
    line-height: $grid-width / 2;
    margin-left: $grid-width;
    padding: 0 0.25em;
    text-align: center;
    white-space: nowrap;
  }

  .name {
    @include box-sizing(border-box);

    border-bottom: 1px solid #aaa9ae;
    font-weight: 400;
  }
}

.card {
  @include box-sizing(border-box);

  background-origin: border-box;
  border: 1px solid black;
  border-radius: $grid-width / 7.5;
  width: $card-width;
  height: $card-height;

  background: {
    image: url('cards.png');
    position: 0 0;
    repeat: no-repeat;
    // Actual image is 2x resolution for retina displays. Size sets it in logical pixels.
    size: $card-width * 13 $card-height * 7; // 13 ranks by 1 face-down + 4 suits + 2 alternate suit colors
  }

  // Nested loop because Firefox doesn't support background-position-(x|y).
  @for $i from 0 to length($ranks) {
    @for $j from 0 to length($suits) {
      &.#{nth($ranks, $i + 1)}.#{nth($suits, $j + 1)} {
        background-position: ($i * $card-width * -1) (($j + 1) * $card-height * -1);
      }
    }
  }
}

.four-color-deck .card {
  @for $i from 0 to length($ranks) {
    @for $j from 2 to length($suits) {
      &.#{nth($ranks, $i + 1)}.#{nth($suits, $j + 1)} {
        background-position: ($i * $card-width * -1) (($j + 3) * $card-height * -1);
      }
    }
  }
}

#table-background {
  // Border radius will also bet set in JavaScript.
  background-color: #0bd138;
  position: absolute;
  top: 20%;
  left: 10%;
  height: 60%;
  width: 80%;
  z-index: -1;
}
